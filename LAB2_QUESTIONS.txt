1. Assuming that the following JOS kernel code is correct, what type should variable x have, uintptr_t or physaddr_t
	uintptr_t; its a virtual address
2. 
3. We have placed the kernel and user environment in the same address space. Why will user programs not be able to read or write the kernel's memory? What specific mechanisms protect the kernel memory?
	we set perms to control this
4. What is the maximum amount of physical memory that this operating system can support? Why?
	512*4MB pages = 2GB physical memory,(/8) so 256MB kernel, starting from 0xf
5. How much space overhead is there for managing memory, if we actually had the maximum amount of physical memory? How is this overhead broken down?
	6MB and 4KB.4KB in the page directory, 6MB between the pageinfo and pagetables. 512 pageinfo at 4KB each and 2034 4KB page tables
6. Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. Immediately after we turn on paging, EIP is still a low number (a little over 1MB). At what point do we transition to running at an EIP above KERNBASE? What makes it possible for us to continue executing at a low EIP between when we enable paging and when we begin running at an EIP above KERNBASE? Why is this transition necessary?
